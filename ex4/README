aviadle


===============================
=  README for ex4:  HashSet   =
===============================


==================
=  Description:  =
==================

this jar file contain-
    ChainedHashSet.java - a hash-set based on chaining. Extends SimpleHashSet.
    
    OpenHashSet.java -  a hash-set based on open-hashing with quadratic probing.
    Extends SimpleHashSet.
    
    OpenHashSetData.java - data structure that will help us "flag" the cell if 
    it deleted
    
    SimpleHashSet.java - an abstract class implementing SimpleSet.
    
    CollectionFacadeSet.java -  wrap an object implementing java’s Collection<String>
    interface, such as LinkedList<String>, TreeSet<String>, or HashSet<String>,
    with a class that has a common type with our own implementations for sets.
    
    SimpleSetPerformanceAnalayzer.java - has a main method that measures the 
    run-times requested in the “Performance Analysis” section.

===================================
=     List Of Submitted Files     =
===================================

  README - This file
  ChainedHashSet.java 
  OpenHashSet.java
  OpenHashSetData.java  
  SimpleHashSet.java
  CollectionFacadeSet.java 
  SimpleSetPerformanceAnalayzer.java

=================================
=     Question asked in pdf     =
=================================

1.  See Description above.
2.  I implemented ChainedHashSet using a list of LinkedLists, that every cell is
    String type. then i added (or removed or searched) elements using Java's 
    methods for the LinkedList.
3.  In order to delete from OpenHash:
    a. check if the element is in the table (using contains)
    b. search for the element and if we found it, delete the key, and mark the
       boolean as true.
    c. check if we need to decrease the capacity of the table. if so, resize
4.  ===============
    =   results   =
    ===============
    - initializing data 1: 

	ChainedHashSet for data1 took 141399 ml seconds
	OpenHashSet for data1 took 797072 ml seconds
	TreeSet for data1 took 344 ml seconds
	LinkedList for data1 took 16 ml seconds
	HashSet for data1 took 125 ml seconds
	
	- initializing data 2: 
	
	ChainedHashSet for data 2 took 218 ml seconds
	OpenHashSet for data 2 took 125 ml seconds
	TreeSet for data 2 took 109 ml seconds
	LinkedList for data 2 took 0 ml seconds
	HashSet for data 2 took 2714 ml seconds
	
	LinkedList is the fastest for data1 and LinkedList is the fastest for data2
	
	- comparing data 1 and data 2:
	
	for the set : ChainedHashSet it took 141399 ml for data 1. and 218 ml for data 2
	for the set : OpenHashSet it took 797072 ml for data 1. and 125 ml for data 2
	for the set : TreeSet it took 344 ml for data 1. and 109 ml for data 2
	for the set : LinkedList it took 16 ml for data 1. and 0 ml for data 2
	for the set : HashSet it took 125 ml for data 1. and 2714 ml for data 2
	
	- finding hi in data 1 set:
	
	for the set ChainedHashSet the time to find hi in data1 is 0
	for the set OpenHashSet the time to find hi in data1 is 0
	for the set TreeSet the time to find hi in data1 is 0
	for the set LinkedList the time to find hi in data1 is 0
	for the set HashSet the time to find hi in data1 is 0
	
	ChainedHashSet is the fastest for finding hi
	
	
	- finding '-13170890158' in data1 set:
	
	for the set ChainedHashSet the time to find '-13170890158' in data1 is 16
	for the set OpenHashSet the time to find '-13170890158' in data1 is 0
	for the set TreeSet the time to find '-13170890158' in data1 is 0
	for the set LinkedList the time to find '-13170890158' in data1 is 0
	for the set HashSet the time to find '-13170890158' in data1 is 0
	
	OpenHashSet is the fastest for finding '-13170890158' in data 1
	
	
	- comparing finding hi and '-13170890158' in data1 set:
	
	for the set ChainedHashSet initialized by data 1,
	            it took 0 ml to find hi and 16 ml to find '-13170890158'
	for the set OpenHashSet initialized by data 1, 
	            it took 0 ml to find hi and 0 ml to find '-13170890158'
	for the set TreeSet initialized by data 1,
	            it took 0 ml to find hi and 0 ml to find '-13170890158'
	for the set LinkedList initialized by data 1, 
	            it took 0 ml to find hi and 0 ml to find '-13170890158'
	for the set HashSet initialized by data 1,
	            it took 0 ml to find hi and 0 ml to find '-13170890158'
	
	- finding hi in data2 set:
	
	for the set ChainedHashSet the time to find hi in data2 0
	for the set OpenHashSet the time to find hi in data2 0
	for the set TreeSet the time to find hi in data2 0
	for the set LinkedList the time to find hi in data2 0
	for the set HashSet the time to find hi in data2 0
	
	- finding '-13170890158' in data2 set:
	
	for the set ChainedHashSet the time to find '-13170890158' in data2 0
	for the set OpenHashSet the time to find '-13170890158' in data2 0
	for the set TreeSet the time to find '-13170890158' in data2 0
	for the set LinkedList the time to find '-13170890158' in data2 0
	for the set HashSet the time to find '-13170890158' in data2 0
	
	ChainedHashSet is the fastest for finding '-13170890158' in data 2
	
	
	- comparing finding hi and '-13170890158' in data2 set:
	
	for the set ChainedHashSet initialized by data 2, 
	            it took 0 ml to find hi and 0 ml to find '-13170890158'
	for the set OpenHashSet initialized by data 2, 
	            it took 0 ml to find hi and 0 ml to find '-13170890158'
	for the set TreeSet initialized by data 2,
	            it took 0 ml to find hi and 0 ml to find '-13170890158'
	for the set LinkedList initialized by data 2,
	            it took 0 ml to find hi and 0 ml to find '-13170890158'
	for the set HashSet initialized by data 2,
	            it took 0 ml to find hi and 0 ml to find '-13170890158'

5.a.OpenHashSet is not so efficient with data1.txt because sometimes the words
    has the same hashcode and thats why we had to check every time and resize
    table constantly. ChainedHashSet is better, but not great, because every
    time we got the same hash code, we need to add it to a linked list.
  
  b.ChainedHashSet: plus - add and find different values quickly.
    minus - when we got words with the same hash value it's add a little slower,
            using LinkedList add.
    
    OpenHashSet: plus - it's fine with hashing different values.
    minus - when we have words with the same hash value it add it very slowly. 
    its also not so good in finding words with the same hash value.
    
    LinkedList: the best in hashing in terms of quickness in adding, but its
    not so good with finding.

    TreeSet: plus - very good with finding words with the same hash values.
             it's average in terms of adding.

    HashSet: very good with different hash values.
             it's a little bad with mapping the same hash values
             
  c.ChainedHashSet is much much better, probably because we relay on Java implement
    of LinkedList, and our probing in OpenHashSet is no competition :/.
  
  d.it's incoclusive. in data1 HashSet was quicker, and in data2 ChainedHashSet.
  
  e.I was suprised that OpenHash perform poorly in data1.
  
  f.with the modulo as described in the pdf the result were twice better.
  
==================
=     Design     =
==================

SimpleHashSet is the abstract parent of: - OpenHashSet
                                         - ChainedHashSet
SimpleHashSet implementing SimpleHase interface.
